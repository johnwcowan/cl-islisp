(=> In the examples, the metasymbol “” designates the result of an actual evaluation. For example:)
(=>                                           (+ 3 4)  7)
(=>                         ((lambda (x) (+ x x)) 4)                        8)
(=>          (functionp (function car))                     t)
(=>          (funcall (function -) 3)                       -3)
(=>          (apply #’- ’(4 3))                             1)
(=>              25)
(=>              (5     6))
(=>              (5     6))
(=>              -18)
(=>             (evenp 88))                                t)
(=>              (f 7)))                                   17)
(=>                 1 2 (list 3 4))               4)
(=>              (funcall f (apply g args)))))             compose)
(=>             30)
(=>              1)
(=>           (defconstant e 2.7182818284590451)  e)
(=>           e                                   2.7182818284590451)
(=>           (defun f () e)                      f)
(=>           (f)                                 2.7182818284590451)
(=>          (defglobal today ’wednesday)         today)
(=>          today                                wednesday)
(=>          (defun what-is-today () today)       what-is-today)
(=>          (what-is-today)                      wednesday)
(=>             wednesday)
(=>             wednesday)
(=>          (defdynamic *color* ’red)            *color*)
(=>          (dynamic *color*)                    red)
(=>             what-color)
(=>          (what-color)                         red)
(=>             green)
(=>          (defun caar (x) (car (car x)))              caar)
(=>           (eql   () ())                                 t)
(=>           (eq    () ())                                 t)
(=>           (eql   ’() ’())                               t)
(=>           (eq    ’() ’())                               t)
(=>           (eql   ’a ’a)                                 t)
(=>           (eq    ’a ’a)                                 t)
(=>           (eql   ’a ’A)                                 t)
(=>           (eq    ’a ’A)                                 t)
(=>           (eql   ’a ’b)                                 nil)
(=>           (eq    ’a ’b)                                 nil)
(=>           (eql   ’f ’nil)                               nil)
(=>           (eq    ’f ’nil)                               nil)
(=>           (eql   2 2)                                   t)
(=>           (eq    2 2)                                   nil or t (implementation-defined))
(=>           (eql   2 2.0)                                 nil)
(=>           (eq    2 2.0)                                 nil)
(=>           (eql   100000000 100000000)                   t)
(=>           (eq    100000000 100000000)                   nil or t (implementation-defined))
(=>           (eql   10.00000 10.0)                         t)
(=>           (eq    10.00000 10.0)                         nil or t (implementation-defined))
(=>           (eql   (cons 1 2) (cons 1 2))                 nil)
(=>           (eq    (cons 1 2) (cons 1 2))                 nil)
(=>           (let   ((x ’(a))) (eql x x))                  t)
(=>          (let ((x ’(a))) (eq x x))                        t)
(=>          (eql ’(a) ’(a))                                  nil or t (implementation-defined))
(=>          (eq  ’(a) ’(a))                                  nil or t (implementation-defined))
(=>            (eql x (cdr y)))                               nil or t (implementation-defined))
(=>            (eq x (cdr y)))                                nil or t (implementation-defined))
(=>          (eql ’(b) (cdr ’(a b)))                          nil or t (implementation-defined))
(=>          (eq ’(b) (cdr ’(a b)))                           nil or t (implementation-defined))
(=>            (eql p p))                                     t)
(=>            (eq p p))                                      t)
(=>          (let ((x "a")) (eql x x))                        t)
(=>          (let ((x "a")) (eq x x))                         t)
(=>          (eql "a" "a")                                    nil or t    (implementation-defined))
(=>          (eq "a" "a")                                     nil or t    (implementation-defined))
(=>          (let ((x "")) (eql x x))                         t)
(=>          (let ((x "")) (eq x x))                          t)
(=>          (eql "" "")                                      nil or t    (implementation-defined))
(=>          (eq "" "")                                       nil or t    (implementation-defined))
(=>          (eql #\a #\A)                                    nil)
(=>          (eq #\a #\A)                                     nil)
(=>          (eql #\a #\a)                                    t)
(=>          (eq #\a #\a)                                     nil or t    (implementation-defined))
(=>          (eql #\space #\Space)                           t)
(=>          (eq #\space #\Space)                            nil or t    (implementation-defined))
(=>          (eql #\space #\space)                           t)
(=>          (eq #\space #\space)                            nil or t    (implementation-defined))
(=>           (equal   ’a ’a)                                 t)
(=>           (equal   2 2)                                   t)
(=>           (equal   2 2.0)                                 nil)
(=>           (equal   ’(a) ’(a))                             t)
(=>                    ’(a (b) c))                            t)
(=>           (equal   (cons 1 2) (cons 1 2))                 t)
(=>           (equal   ’(a) (list ’a))                        t)
(=>           (equal   "abc" "abc")                           t)
(=>           (equal   (vector ’a) (vector ’a))               t)
(=>           (equal   #(a b) #(a b))                         t)
(=>           (equal   #(a b) #(a c))                         nil)
(=>           (equal   "a" "A")                               nil)
(=>           (not   t)                                      nil)
(=>           (not   ’())                                    t)
(=>           (not   ’nil)                                   t)
(=>           (not   nil)                                    t)
(=>           (not   3)                                      nil)
(=>           (not   (list))                                 t)
(=>           (not   (list 3))                               nil)
(=>             (and (= 2 2) (> 2 1))                                t)
(=>             (and (= 2 2) (< 2 1))                                nil)
(=>             (and (eql ’a ’a) (not (> 1 2)))                      t)
(=>             (let ((x ’a)) (and x (setq x ’b)))                   b)
(=>             (let ((x nil)) (and x (setq x ’b)))                  nil)
(=>                   (- time 12) time))                             10)
(=>                   (- time 12) time))                             6)
(=>             (or (= 2      2) (> 2 1))                              t)
(=>             (or (= 2      2) (< 2 1))                              t)
(=>             (let ((x      ’a)) (or x (setq x ’b)))                 a)
(=>             (let ((x      nil)) (or x (setq x ’b)))                b)
(=>          #2A((a b c) (d e f))                            #2A((a b c) (d e f)))
(=>          #\a                                             #\a)
(=>          145932                                          145932)
(=>          "abc"                                           "abc")
(=>          #(a b c)                                        #(a b c))
(=>          (quote a)                                        a)
(=>          (quote #(a b c))                                 #(a b c))
(=>          (quote (+ 1 2))                                  (+ 1 2))
(=>          ’()                                              nil)
(=>          ’a                                               a)
(=>          ’#(a b c)                                        #(a b c))
(=>          ’(car l)                                         (car l))
(=>          ’(+ 1 2)                                         (+ 1 2))
(=>          ’(quote a)                                       (quote a))
(=>          ’’a                                              (quote a))
(=>          (car ’’a)                                        quote)
(=>          (defglobal x 0)                                x)
(=>          x                                              0)
(=>          (let ((x 1)) x)                                1)
(=>          x                                              0)
(=>          (defglobal x 2)                                x)
(=>          (+ x 1)                                        3)
(=>          (setq x 4)                                     4)
(=>          (+ x 1)                                        5)
(=>          (let ((x 1)) (setq x 2) x)                     2)
(=>          (+ x 1)                                        5)
(=>          (setf (car x) 2)                                 2)
(=>             `(car ,spot))                              first)
(=>          (setf (first x) 2)                            2)
(=>                (* x y))                                           6)
(=>                  (* z x)))                                        35)
(=>                  (list x y)))                                  (2 1))
(=>              (* z x)))                                   70)
(=>              (list x y)))                              (2 2))
(=>              (bar 1)))                                foo)
(=>            (+ x (dynamic y)))                         bar)
(=>          (foo 2)                                      3)
(=>          (if (> 3 2) ’yes ’no)                        yes)
(=>          (if (> 2 3) ’yes ’no)                        no)
(=>          (if (> 2 3) ’yes)                            nil)
(=>          (if (> 3 2) (- 3 2) (+ 3 2))                  1)
(=>            (if (< x 0) x (- x)))                       -7)
(=>                ((< 3 2) ’less))                          greater)
(=>                ((< 3 3) ’less))                          nil)
(=>                (t       ’equal))                         equal)
(=>            ((4 6 8 9) ’composite))                      composite)
(=>            ((b) ’b))                                    nil)
(=>            (t ’consonant))                              consonant)
(=>                (t ’consonants)))                vowels)
(=>            (t ’more))                                 two)
(=>            (("bar") 2))                               2)
(=>          (defglobal x 0)                               x)
(=>            (+ x 1))                                      6)
(=>             nil)
(=>            x)                                 (1 2 3 4 5))
(=>            (setf (elt vec i) i))                         #(0 1 2 3 4))
(=>                 ((null x) sum)))                         25)
(=>              6)
(=>                 (f2 f))))                      f1)
(=>             (funcall g))                                 f2)
(=>          (f1)                                           exit)
(=>             0)
(=>                result)))                      bar)
(=>          (bar   t nil)                                  second-exit)
(=>          (bar   nil nil)                                third-exit)
(=>                 (catch ’block-sum (bar x)))             foo)
(=>                     bar)
(=>          (foo ’(1 2 3 4))                               10)
(=>          (foo ’(1 2 a 4))                               0)
(=>             with-retry)
(=>              1.7320508075688772)
(=>             foo)
(=>             bar)
(=>          (foo ’(a b c))                              t)
(=>          (property ’a ’label)                        nil)
(=>          (foo ’(a b a c))                            found)
(=>          (property ’a ’label)                        nil)
(=>            (catch ’outer (test2)))                 test)
(=>             test2)
(=>             test3)
(=>            (throw ’outer 6))                       test4)
(=>          (test)                                    an error shall be signaled)
(=>             caar)
(=>             (list 3 4))
(=>             (list name a (quote a)))
(=>             (a 3 x x x b))
(=>              ((foo 7) . cons))
(=>             (a `(b ,(+ 1 2) ,(foo 4 d) e) f))
(=>             (a `(b ,x ,’y d) e))
(=>          (the <integer> 10)                     10)
(=>          (the <number> 10)                      10)
(=>          (assure <integer> 10)                  10)
(=>          (assure <number> 10)                   10)
(=>           (convert 3 <float>)                       3.0)
(=>           (convert "abc" <general-vector>)          #(#\a #\b #\c))
(=>           (convert #(a b) <list>)                   (a b))
(=>           (symbolp   ’a)                              t)
(=>           (symbolp   "a")                             nil)
(=>           (symbolp   #\a)                             nil)
(=>           (symbolp   ’t)                              t)
(=>           (symbolp   t)                               t)
(=>           (symbolp   ’nil)                            t)
(=>           (symbolp   nil)                             t)
(=>           (symbolp   ’())                             t)
(=>           (symbolp   ’*pi*)                           t)
(=>           (symbolp   *pi*)                            nil)
(=>           (property ’zeus ’daughter)                    athena)
(=>             athena)
(=>             athena)
(=>          (remove-property ’zeus ’daughter)            athena)
(=>              `(let ((,v ,x)) (+ ,v ,v))))             twice)
(=>          (twice 5)                                    10)
(=>          (numberp   3)                                  t)
(=>          (numberp   -0.3)                               t)
(=>          (numberp   ’(a b c))                           nil)
(=>          (numberp   "17")                               nil)
(=>          (parse-number    "123.34")                    123.34)
(=>          (parse-number    "#XFACE")                    64206)
(=>            (= 3 4)                             nil)
(=>            (= 3 3.0)                           t)
(=>            (= (parse-number "134.54") 134.54)  t)
(=>            (= 0.0 -0.0)                                  t)
(=>            (/= 3 4)                            t)
(=>            (/= 3 3.0)                          nil)
(=>            (/= (parse-number "134.54") 134.54) nil)
(=>            (> 2 2)                                         nil)
(=>            (> 2.0 2)                                       nil)
(=>            (> 2 -10)                                       t)
(=>            (> 100 3)                                       t)
(=>            (< 2 2)                                         nil)
(=>            (< 1 2)                                         t)
(=>            (>= 2 2)                                        t)
(=>            (>= 2.0 2)                                      t)
(=>            (>= -1 2)                                       nil)
(=>            (<= -1 2)                                       t)
(=>            (<= 2 -1)                                       nil)
(=>           (+ 12 3)                                         15)
(=>           (+ 1 2 3)                                        6)
(=>           (+ 12 3.0)                                       15.0)
(=>           (+ 4 0.0)                                        4.0)
(=>           (+)                                              0)
(=>           (* 12 3)                                         36)
(=>           (* 12 3.0)                                       36.0)
(=>           (* 4.0 0)                                        0.0)
(=>           (* 2 3 4)                                        24)
(=>           (*)                                              1)
(=>           (- 1)                                            -1)
(=>           (- -4.0)                                         4.0)
(=>           (- 4.0)                                          -4.0)
(=>           (eql (- 0.0) -0.0)                               t)
(=>           (eql (- -0.0) 0.0)                               t)
(=>           (-   1 2)                                        -1)
(=>           (-   92 43)                                      49)
(=>           (-   2.3 -3.0)                                   5.3)
(=>           (-   0.0 0.0)                                    0.0)
(=>           (-   3 4 5)                                      -6)
(=>          (reciprocal 2)                                0.5)
(=>          (quotient 10 5)                               2)
(=>          (quotient 1 2)                                0.5)
(=>          (quotient 2 -0.5)                             -4.0)
(=>          (quotient 2 3 4)                              0.16666666666666666)
(=>          (max -5 3)                                   3)
(=>          (max 2.0 3)                                  3)
(=>          (max 2 2.0)                                  2 or 2.0 (implementation-defined))
(=>          (max   1   5 2 4 3)                            5)
(=>          (min   3   1)                                  1)
(=>          (min   1   2.0)                                1)
(=>          (min   2   2.0)                                2 or 2.0 (implementation-defined))
(=>          (min   1   5 2 4 3)                            1)
(=>          (abs -3)                                     3)
(=>          (abs 2.0)                                    2.0)
(=>          (abs -0.0)                                   0.0)
(=>          (exp   1)                                      2.718281828459045)
(=>          (exp   2)                                      7.38905609893065)
(=>          (exp   1.23)                                   3.4212295362896734)
(=>          (exp   0)                                      1 or 1.0 (implementation-defined))
(=>          (log 2.718281828459045)                      1.0)
(=>          (log 10)                                     2.302585092994046)
(=>          (log 1)                                      0 or 0.0 (implementation-defined))
(=>          (expt   2 3)                                  8)
(=>          (expt   -100 2)                               10000)
(=>          (expt   4 -2)                                 0.0625)
(=>          (expt   0.5 2)                                0.25)
(=>          (expt   x 0)                                  1     if x is an integer)
(=>          (expt   x 0)                                  1.0 if x is a float)
(=>          (expt   -0.25 -1)                             -4.0)
(=>          (expt   100 0.5)                              10.0)
(=>          (expt   100 -1.5)                             0.001)
(=>          (expt   x 0.0)                                1.0 if x is a positive float)
(=>          (sqrt 4)                                       2)
(=>          (sqrt 2)                                       1.4142135623730951)
(=>          *pi*                                           3.141592653589793)
(=>          (sin 1)                              0.8414709848078965)
(=>          (sin 0)                              0 or 0.0 (implementation-defined))
(=>          (sin 0.001)                          9.999998333333417E-4)
(=>          (cos 1)                              0.5403023058681398)
(=>          (cos 0)                              1 or 1.0 (implementation-defined))
(=>          (cos 0.001)                          0.9999995000000417)
(=>          (tan 1)                              1.557407724654902)
(=>          (tan 0)                              0 or 0.0 (implementation-defined))
(=>          (tan 0.001)                          0.0010000003333334668)
(=>          (atan2     0 3.0)                               0 or 0.0 (implementation-defined))
(=>          (atan2     1 1)                                 0.7853981633974483)
(=>          (atan2     1.0 -0.3)                            1.8622531212727635)
(=>          (atan2     0.0 -0.5)                            3.141592653589793)
(=>          (atan2     -1 -1)                               -2.356194490192345)
(=>          (atan2     -1.0 0.3)                            -1.2793396)
(=>          (atan2     0.0 0.5)                             0.0)
(=>          (defun asin (x) (atan2 x (sqrt (- 1 (expt x 2)))))               asin)
(=>          (defun acos (x) (atan2 (sqrt (- 1 (expt x 2))) x))               acos)
(=>          (defun atan (x) (atan2 x 1))           atan)
(=>            (sinh     1)                                   1.1752011936438014)
(=>            (sinh     0)                                   0 or 0.0 (implementation-defined))
(=>            (sinh     0.001)                               0.001000000166666675)
(=>            (cosh     1)                                   1.5430806348152437)
(=>            (cosh     0)                                   1 or 1.0 (implementation-defined))
(=>            (cosh     0.001)                               1.0000005000000416)
(=>            (tanh     1)                                   0.7615941559557649)
(=>            (tanh     0)                                   0 or 0.0 (implementation-defined))
(=>            (tanh     0.001)                               9.999996666668002E-4)
(=>            (atanh 0.5)                                  0.5493061443340549)
(=>            (atanh 0)                                    0 or 0.0 (implementation-defined))
(=>            (atanh 0.001)                                0.0010000003333335335)
(=>            (defun asinh (x) (atanh (quotient x (sqrt (+ 1 (expt x 2))))))              asinh)
(=>            (defun acosh (x) (atanh (quotient (sqrt (* (- x 1) (+ x 1))) x)))               acosh)
(=>          (floatp "2.4")                               nil)
(=>          (floatp 2)                                   nil)
(=>          (floatp 2.0)                                 t)
(=>          (float   0)                                    0.0)
(=>          (float   2)                                    2.0)
(=>          (float   -2.0)                                 -2.0)
(=>          (float   123456789123456789123456789)          1.2345678912345679E26)
(=>          (floor 3.0)                                  3)
(=>          (floor   3.4)                                  3)
(=>          (floor   3.9)                                  3)
(=>          (floor   -3.9)                                 -4)
(=>          (floor   -3.4)                                 -4)
(=>          (floor   -3.0)                                 -3)
(=>          (ceiling   3.0)                              3)
(=>          (ceiling   3.4)                              4)
(=>          (ceiling   3.9)                              4)
(=>          (ceiling   -3.9)                             -3)
(=>          (ceiling   -3.4)                             -3)
(=>          (ceiling   -3.0)                             -3)
(=>          (truncate   3.0)                               3)
(=>          (truncate   3.4)                               3)
(=>          (truncate   3.9)                               3)
(=>          (truncate   -3.4)                              -3)
(=>          (truncate   -3.9)                              -3)
(=>          (truncate   -3.0)                              -3)
(=>          (round 3.0)                                  3)
(=>             (round   3.4)                                  3)
(=>             (round   -3.4)                                 -3)
(=>             (round   3.6)                                  4)
(=>             (round   -3.6)                                 -4)
(=>             (round   3.5)                                  4)
(=>             (round   -3.5)                                 -4)
(=>             (round   2.5)                                  2)
(=>             (round   -0.5)                                 0)
(=>             (integerp   3)                                 t)
(=>             (integerp   3.4)                               nil)
(=>             (integerp   "4")                               nil)
(=>             (integerp   ’(a b c))                          nil)
(=>          (div   12 3)                                     4)
(=>          (div   14 3)                                     4)
(=>          (div   -12 3)                                    -4)
(=>          (div   -14 3)                                    -5)
(=>          (div   12 -3)                                    -4)
(=>          (div   14 -3)                                    -5)
(=>          (div   -12 -3)                                   4)
(=>          (div   -14 -3)                                   4)
(=>          (mod   12 3)                                     0)
(=>          (mod   7 247)                                    7)
(=>          (mod   247 7)                                    2)
(=>          (mod   14 3)                                     2)
(=>          (mod   -12 3)                                    0)
(=>          (mod   -14 3)                                    1)
(=>          (mod   12 -3)                                    0)
(=>          (mod   14 -3)                                    -1)
(=>          (mod   -12 -3)                                   0)
(=>          (mod   -14 -3)                                   -2)
(=>          (gcd   12 5)                                     1)
(=>          (gcd   15 24)                                    3)
(=>          (gcd   -15 24)                                   3)
(=>          (gcd   15 -24)                                   3)
(=>          (gcd   -15 -24)                                  3)
(=>          (gcd   0 -4)                                     4)
(=>          (gcd   0 0)                                      0)
(=>          (lcm   2 3)                                      6)
(=>          (lcm   15 24)                                    120)
(=>          (lcm   15 -24)                                   120)
(=>          (lcm   -15 24)                                   120)
(=>          (lcm   -15 -24)                                  120)
(=>          (lcm   0 -4)                                     0)
(=>          (lcm   0 0)                                      0)
(=>          (isqrt 49)                           7)
(=>          (isqrt 63)                           7)
(=>             1000000000000000)
(=>          (characterp #\a)                              t)
(=>          (characterp "a")                              nil)
(=>          (characterp ’a)                               nil)
(=>           (char= #\a #\a)                                t)
(=>           (char= #\a #\b)                                nil)
(=>           (char= #\a #\A)                                nil)
(=>           (char/= #\a #\a)                               nil)
(=>           (char< #\a #\a)                                nil)
(=>           (char< #\a #\b)                                t)
(=>           (char< #\b #\a)                                nil)
(=>           (char< #\a #\A)                                nil or t     (implementation-defined))
(=>           (char< #\* #\a)                                nil or t     (implementation-defined))
(=>           (char> #\b #\a)                                t)
(=>           (char<= #\a #\a)                               t)
(=>           (char<= #\a #\A)                               nil or t     (implementation-defined))
(=>           (char>= #\b #\a)                               t)
(=>           (char>= #\a #\a)                               t)
(=>          (consp   ’(a . b))                              t)
(=>          (consp   ’(a b c))                              t)
(=>          (consp   ’())                                   nil)
(=>          (consp   #(a b))                                nil)
(=>          (cons   ’a ’())                                 (a))
(=>          (cons   ’(a) ’(b c d))                          ((a) b c d))
(=>          (cons   "a" ’(b c))                             ("a" b c))
(=>          (cons   ’a 3)                                   (a . 3))
(=>          (cons   ’(a b) ’c)                              ((a b) . c))
(=>          (car ’(a b c))                               a)
(=>          (car ’((a) b c d))                             (a))
(=>          (car ’(1 . 2))                                 1)
(=>          (cdr ’((a) b c d))                          (b c d))
(=>          (cdr ’(1 . 2))                              2)
(=>             ((banana orange) apple banana (banana orange) banana))
(=>             ((apple . banana) (orange) banana (apple . banana) banana))
(=>           (null ’(a b c))                                        nil)
(=>           (null ’())                                             t)
(=>           (null (list))                                          t)
(=>           (listp ’(a b c))                                       t)
(=>           (listp ’())                                            t)
(=>           (listp ’(a . b))                                       t)
(=>             (listp x))                                           t)
(=>           (listp "abc")                                          nil)
(=>           (listp #(1 2))                                         nil)
(=>           (listp ’jerome)                                        nil)
(=>          (create-list 3 17)                            (17 17 17))
(=>          (create-list 2 #\a)                           (#\a #\a))
(=>          (list ’a (+ 3 4) ’c)                            (a 7 c))
(=>          (list)                                          nil)
(=>          (reverse ’(a b c d e))               (e d c b a))
(=>          (reverse ’(a))                       (a))
(=>          (reverse ’())                        ())
(=>                                               implementation-defined)
(=>          (append ’(a b c) ’(d e f))                     (a b c d e f))
(=>          (member ’c ’(a b c d e f))                     (c d e f))
(=>          (member ’g ’(a b c d e f))                     nil)
(=>          (member ’c ’(a b c a b c))                     (c a b c))
(=>          (mapcar #’car ’((1 a) (2 b) (3 c)))  (1 2 3))
(=>          (mapcar #’abs ’(3 -4 2 -5 -6))       (3 4 2 5 6))
(=>          (mapcar #’cons ’(a b c) ’(1 2 3))    ((a . 1) (b . 2) (c . 3)))
(=>                        8)
(=>                     ((1 2 3 4 1 2 1 2 3) (2 3 4 2 2 3)))
(=>                     ((foo a b c d) (foo b c d) (foo c d) (foo d)))
(=>                        (0 0 1 0 1 1 1))
(=>                        4)
(=>                        (4 5 7))
(=>                        (a b c b c))
(=>           (mapcon #’list ’(1 2 3 4))                   ((1 2 3 4) (2 3 4) (3 4) (4)))
(=>           (assoc ’a ’((a . 1) (b . 2)))                (a . 1))
(=>           (assoc ’a ’((a . 1) (a . 2)))                (a . 1))
(=>           (assoc ’c ’((a . 1) (b . 2)))                nil)
(=>            ((nil nil nil) (t nil nil) (t nil nil) (t nil nil) (t t t)))
(=>          (create-array ’(2 3) 0.0)                     #2a((0.0 0.0 0.0) (0.0 0.0 0.0)))
(=>          (create-array ’(2) 0.0)                       #(0.0 0.0))
(=>             array1)
(=>             #3a(((0 0 0) (0 0 0) (0 0 0)))
(=>          (aref array1 0 1 2)                           0)
(=>          (setf (aref array1 0 1 2) 3.14)               3.14)
(=>          (aref array1 0 1 2)                           3.14)
(=>          (aref (create-array ’(8 8) 6) 1 1)            6)
(=>          (aref (create-array ’() 19))                  19)
(=>          (setf (aref array1 0 1 2) 3.15)               3.15)
(=>          (set-aref 51.3 array1 0 1 2)                 51.3)
(=>            (create-array ’(2 2) 0))                   (2 2))
(=>          (array-dimensions (vector ’a ’b))            (2))
(=>          (array-dimensions "foo")                     (3))
(=>             ((nil nil) (t nil) (t t) (t t) (nil nil)))
(=>          (create-vector 3 17)                           #(17 17 17))
(=>          (create-vector 2 #\a)                          #(#\a #\a))
(=>          (vector ’a ’b ’c)                                #(a b c))
(=>          (vector)                                         #())
(=>          (stringp "abc")                               t)
(=>          (stringp ’abc)                                nil)
(=>          (create-string 3 #\a)                         "aaa")
(=>          (create-string 0 #\a)                         "")
(=>          (if   (string= "abcd" "abcd") t nil)             t)
(=>          (if   (string= "abcd" "wxyz") t nil)             nil)
(=>          (if   (string= "abcd" "abcde") t nil)            nil)
(=>          (if   (string= "abcde" "abcd") t nil)            nil)
(=>          (if   (string/= "abcd" "wxyz") t nil)            t)
(=>          (if   (string< "abcd" "abcd") t nil)             nil)
(=>          (if   (string< "abcd" "wxyz") t nil)             t)
(=>          (if   (string< "abcd" "abcde") t nil)            t)
(=>          (if   (string< "abcde" "abcd") t nil)            nil)
(=>          (if   (string<= "abcd" "abcd") t nil)            t)
(=>          (if   (string<= "abcd" "wxyz") t nil)            t)
(=>          (if   (string<= "abcd" "abcde") t nil)           t)
(=>          (if   (string<= "abcde" "abcd") t nil)           nil)
(=>          (if   (string> "abcd" "wxyz") t nil)             nil)
(=>          (if   (string>= "abcd" "abcd") t nil)            t)
(=>          (char-index     #\b   "abcab")                   1)
(=>          (char-index     #\B   "abcab")                   nil)
(=>          (char-index     #\b   "abcab" 2)                 4)
(=>          (char-index     #\d   "abcab")                   nil)
(=>          (char-index     #\a   "abcab" 4)                 nil)
(=>          (string-index     "foo" "foobar")                0)
(=>          (string-index     "bar" "foobar")                3)
(=>          (string-index     "FOO" "foobar")                nil)
(=>          (string-index     "foo" "foobar" 1)              nil)
(=>          (string-index     "bar" "foobar" 1)              3)
(=>          (string-index     "foo" "")                      nil)
(=>          (string-index     "" "foo")                      0)
(=>          (string-append     "abc" "def")                  "abcdef")
(=>          (string-append     "abc" "abc")                  "abcabc")
(=>          (string-append     "abc" "")                     "abc")
(=>          (string-append     "" "abc")                     "abc")
(=>          (string-append     "abc" "" "def")               "abcdef")
(=> the number of conses at the uppermost level of the list. For example, (length ’(a b . c)) )
(=>          (length    ’(a b c))                              3)
(=>          (length    ’(a (b) (c d e)))                      3)
(=>          (length    ’())                                   0)
(=>          (length    (vector ’a ’b ’c))                     3)
(=>          (elt ’(a b c) 2)                               c)
(=>          (elt (vector ’a ’b ’c) 1)                      b)
(=>          (elt "abc" 0)                                  #\a)
(=>             x)                                            "xxOxx")
(=>           (subseq "abcdef" 1 4)                "bcd")
(=>           (subseq ’(a b c d e f) 1 4)          (b c d))
(=>              #(b c d))
(=>           (setq a (list 1 2 3 4))                           (1 2 3 4))
(=>           (setq b (list 10 10 10 10))                       (10 10 10 10))
(=>           (map-into a #’+ a b)                              (11 12 13 14))
(=>           a                                                 (11 12 13 14))
(=>           b                                                 (10 10 10 10))
(=>           (setq k ’(one two three))                         (one two three))
(=>          (map-into a #’cons k a)                     ((one . 11) (two . 12) (three . 13) 14))
(=>                       (2 4 6 8))
(=>          a                                           (2 4 6 8))
(=>          (streamp (standard-input))                  t)
(=>          (streamp ’())                               nil)
(=>          (input-stream-p (standard-input))  t)
(=>          (input-stream-p (standard-output))  nil)
(=>          (input-stream-p ’(a b c))           nil)
(=>          (output-stream-p (standard-output))  t)
(=>          (output-stream-p (standard-input))  nil)
(=>          (output-stream-p "hello")            nil)
(=>            (this is))
(=>             implementation-defined)
(=>                                               nil)
(=>                                               hello)
(=>             input-str)
(=>          (close input-str)                           implementation-defined)
(=>          (close input-str)                           implementation-defined)
(=>             output-str)
(=>          (finish-output output-str)                  nil)
(=>             (this is a))
(=>             "helloworld")
(=>              ("This is a string" "right!"))
(=>             str)
(=>          (read   str)                                   hello)
(=>          (read   str)                                   #(1 2 3))
(=>          (read   str)                                   123)
(=>          (read   str)                                   #\A)
(=>          (read   str nil "the end")                     "the end")
(=>             str)
(=>          (read-char str)                           #\h)
(=>          (read-char str)                           #\i)
(=>              (#\f #\f #\o))
(=>              nil)
(=>             str)
(=>          (read-line str)                               "This is an example")
(=>          (read-line str)                               "look at the output file")
(=>            (format out "This is an example")) nil)
(=>            (stream-ready-p in))               t)
(=>          (format output-stream "No result")          nil)
(=>             nil)
(=>             nil)
(=>             nil)
(=>             nil)
(=>             nil)
(=>             nil)
(=>             nil)
(=>             nil)
(=>             nil)
(=>             byte-example)
(=>          (format byte-example "hello")        nil)
(=>          (close byte-example)                 implementation-defined)
(=>             implementation-defined)
(=>          (read-byte     byte-example)                   104   (implementation-defined))
(=>          (read-byte     byte-example)                   101   (implementation-defined))
(=>          (read-byte     byte-example)                   108   (implementation-defined))
(=>          (read-byte     byte-example)                   108   (implementation-defined))
(=>          (read-byte     byte-example)                   111   (implementation-defined))
(=>              (close out-str))                 implementation-defined)
(=>          (probe-file "notexist.lsp")          nil)
(=>             new-file)
(=>          (close new-file)                            implementation-defined)
(=>          (probe-file "notexist.lsp")                 t)
(=>             example)
(=>          (format example "hello")                    nil)
(=>          (close example)                      implementation-defined)
(=>             implementation-defined)
(=>          (file-position example)                       0 (implementation-defined))
(=>          (read-byte example)                           104 (implementation-defined))
(=>          (file-position example)                       1 (implementation-defined))
(=>          (set-file-position example 4)                 4)
(=>          (file-length "file27.dat" 8)         25)
(=>          (file-length "file27.dat" 2)         100)
(=>          (identity ’(a b c))                         (a b c))
(=>          (get-universal-time)                        2901312000)
